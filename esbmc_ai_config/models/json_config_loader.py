# Author: Yiannis Charalambous

from dataclasses import dataclass
from typing_extensions import override

from esbmc_ai_config.models.config_loader import ConfigLoader

__ALLOWED_ENV_TYPES = bool | float | int | str


@dataclass
class JsonConfigField:
    name: str
    default_value: "__ALLOWED_ENV_TYPES" = ""
    is_optional: bool = False
    """Will not load the config if the value is not specified by the user. If
    true will assign default_value."""


class JsonConfigLoader(ConfigLoader):
    autogenerated_string: str = "# Generated by ESBMC-AI config tool."

    def __init__(
        self,
        file_path: str = "~/.config/esbmc-ai.json",
        fields: JsonConfigField = JsonConfigField(""),  # FIXME
        create_missing_fields: bool = False,
    ) -> None:
        assert file_path.endswith(
            ".json"
        ), f"{self.file_path} is not a valid json file."

        super().__init__(
            file_path=file_path,
            create_missing_fields=create_missing_fields,
        )

    @override
    def save(self) -> None:
        raise NotImplementedError()

    @override
    def _create_default_file(self) -> None:
        raise NotImplementedError()

    @override
    def _read_fields(self, create_missing_fields: bool = False) -> None:
        raise NotImplementedError()
