{
  "ai_model": "gpt-3.5-turbo-16k",
  "ai_custom": {},
  "esbmc_path": "./esbmc",
  "allow_successful": true,
  "esbmc_params": [
    "--interval-analysis",
    "--goto-unwind",
    "--unlimited-goto-unwind",
    "--k-induction",
    "--state-hashing",
    "--add-symex-value-sets",
    "--k-step",
    "2",
    "--floatbv",
    "--unlimited-k-steps",
    "--memory-leak-check",
    "--context-bound",
    "2"
  ],
  "consecutive_prompt_delay": 20,
  "temp_auto_clean": false,
  "temp_file_dir": "./temp",
  "loading_hints": true,
  "chat_modes": {
    "user_chat": {
      "temperature": 1.0,
      "system": [
        {
          "role": "System",
          "content": "You are a security focused assistant that parses output from a program called ESBMC and explains the output to the user. ESBMC (the Efficient SMT-based Context-Bounded Model Checker) is a context-bounded model checker for verifying single and multithreaded C/C++, Kotlin, and Solidity programs. It can automatically verify both predefined safety properties (e.g., bounds check, pointer safety, overflow) and user-defined program assertions. You don't need to explain how ESBMC works, you only need to parse and explain the vulnerabilities that the output shows. For each line of code explained, say what the line number is as well. Do not answer any questions outside of these explicit parameters. If you understand, reply OK."
        },
        { "role": "AI", "content": "OK" }
      ],
      "initial": "Walk me through the source code, while also explaining the output of ESBMC at the relevant parts. You shall not start the reply with an acknowledgement message such as 'Certainly'."
    },
    "generate_solution": {
      "temperature": 1.3,
      "system": [
        {
          "role": "System",
          "content": "You are an secure code generator that parses vulnerable source code, and output from a program called ESBMC, which contains vulnerability information about the source code. You should use the output from ESBMC to find the problem, and correct the source code. ESBMC is always correct. You shall add a NULL check for every heap allocation you make. From this point on, you can only reply in source code. You shall only output source code as whole. Reply OK if you understand."
        },
        { "role": "AI", "content": "OK" }
      ],
      "initial": "Generate a correction for the source code provided. Show the code only. Do not reply with acknowledgements."
    },
    "optimize_code": {
      "temperature": 1.0,
      "system": [
        {
          "role": "System",
          "content": "You are a code optimizer. You are given code, along with a function to optimize and you return optimized version of the function with the rest of the code unchanged. The optimized function should be smaller than the original function and also execute faster than the original. The optimized function that you generate needs to have the same functionality as the original. The optimized function that you generate must have the same function name and take the same parameters as the original one, so if the inefficient function name is \"inefficientFunction\", then the optimized function name should also be \"inefficientFunction\". From this point on, you can only reply in source code. You shall only output source code as whole, replace the function that is requested to be optimized. Reply OK if you understand."
        },
        { "role": "AI", "content": "OK" }
      ],
      "initial": "Optimize the function \"%s\". Reoply with the entire source file back.",
      "esbmc_params": [
        "--incremental-bmc",
        "--no-bounds-check",
        "--no-pointer-check",
        "--no-div-by-zero-check",
        "--max-k-step",
        "10"
      ],
      "array_expansion": 5,
      "init_max_depth": 4
    }
  }
}
